@model UsersViewModel

@{
    ViewData["Title"] = "Edit User";
    Layout = "_AdminLayout";
    bool isEditPasswordEnabled = ViewBag.isEditPassword ?? false;
    
    //TODO: Implement Reset Password through email functionality
}

<h2>Edit User</h2>

<div>
    <hr />
    <form asp-action="Edit" asp-controller="Users" method="post">
        @Html.AntiForgeryToken()
        @* <input type="hidden" asp-for="NewUser.UserID"/> *@
        <input type="hidden" asp-for="NewUser.PasswordSalt" />
        <input type="hidden" id="isEditPasswordEnabled" name="isEditPasswordEnabled" value="false" />
        <input type="hidden" value="@Model.NewUser.PasswordHash" id="originalPassword" />

        <div class="form-group mt-2">
            <label asp-for="NewUser.UserID" class="control-label"></label>
            <input asp-for="NewUser.UserID" class="form-control text-muted" style="background-color:#e9ecef; cursor: not-allowed;" readonly required />
            <span asp-validation-for="NewUser.UserID" class="text-danger"></span>
        </div>

        <div class="form-group mt-2">
            <label asp-for="NewUser.Username" class="control-label"></label>
            <input asp-for="NewUser.Username" class="form-control text-muted" style="background-color:#e9ecef; cursor: not-allowed;" readonly required />
            <span asp-validation-for="NewUser.Username" class="text-danger"></span>
        </div>
        <div class="form-group mt-2">
            <label asp-for="NewUser.Email" class="control-label"></label>
            <input asp-for="NewUser.Email" class="form-control" required/>
            <span asp-validation-for="NewUser.Email" class="text-danger"></span>
        </div>
        <div class="form-group mt-2">
            <label asp-for="NewUser.PhoneNumber" class="control-label">Phone Number</label>
            <input asp-for="NewUser.PhoneNumber" class="form-control" required/>
            <span asp-validation-for="NewUser.PhoneNumber" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="NewUser.PasswordHash" class="control-label">Password</label>
            @* <input type="text" value="@Model.NewUser.PasswordHash" id="originalPassword" class="form-control td-password" readonly /> *@

            <button type="button" class="btn btn-dark mt-2 mb-2 btn-sm" id="togglePasswordButton">
                Reset Password
            </button>
            
            @* <button type="button" class="btn-content">Reset Password</button> *@
            <input type="text" asp-for="NewUser.PasswordHash" class="form-control td-password" id="passwordField" readonly required/>

            <span asp-validation-for="NewUser.PasswordHash" class="text-danger"></span>
        </div>
        <div class="form-group mt-2">
            <label asp-for="NewUser.RoleID" class="control-label">Role</label>
            <select asp-for="NewUser.RoleID" class="form-control">

                @* <option value="1">Admin</option> *@
                @* <option value="2">Donor</option> *@
                @* <option value="3">Hospital</option> *@

                @foreach (var role in Model.Roles)
                {
                    <option value="@role.RoleID">@role.RoleName</option>
                }

            </select>
            <span asp-validation-for="NewUser.RoleID" class="text-danger"></span>
        </div>
        <div class="form-group mt-2">
            <label asp-for="NewUser.CreatedAt" class="control-label"></label>
            <input asp-for="NewUser.CreatedAt" class="form-control" readonly />
        </div>
        <div class="form-group mt-2">
            <input type="submit" value="Save" class="btn btn-primary" />
        </div>
    </form>
</div>
<div class="mt-2">
    <a class="btn btn-sm btn-outline-primary" asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var passwordField = document.getElementById('passwordField');
            var isEditPasswordEnabledField = document.getElementById('isEditPasswordEnabled');

            // Ensure initial state is visually styled as readonly
            if (passwordField.hasAttribute('readonly')) {
                passwordField.style.backgroundColor = "#e9ecef";
                passwordField.style.cursor = "not-allowed";
                passwordField.style.opacity = "0.6";
            }
        });

        document.getElementById('togglePasswordButton').addEventListener('click', function () {
            if (!confirm("Warning! Are you sure you want to reset this user's password?")) {
                return; 
            }

            var passwordField = document.getElementById('passwordField');
            var originalPassword = document.getElementById('originalPassword').value;
            var isEditPasswordEnabledField = document.getElementById('isEditPasswordEnabled');

            if (isEditPasswordEnabledField.value === "false") {
                // passwordField.removeAttribute('readonly');
                passwordField.value = '@Model.DefaultUserPassword'; // Allow user to enter a new password
                passwordField.style.backgroundColor = "#ffffff"; // Restore white background
                passwordField.style.cursor = "text";
                passwordField.style.opacity = "1";
                this.textContent = "Don't Reset Password";
                isEditPasswordEnabledField.value = 'true';
            } else {
                passwordField.setAttribute('readonly', 'readonly');
                passwordField.value = originalPassword; // Restore original password
                passwordField.style.backgroundColor = "#e9ecef"; // Grey background when readonly
                passwordField.style.cursor = "not-allowed";
                passwordField.style.opacity = "0.6";
                this.textContent = 'Reset Password';
                isEditPasswordEnabledField.value = 'false';
            }
        });

        // Prevent form submission with empty password
        document.querySelector('form').addEventListener('submit', function () {
            var passwordField = document.getElementById('passwordField');
            var originalPassword = document.getElementById('originalPassword').value;
            var isEditPasswordEnabledField = document.getElementById('isEditPasswordEnabled');

            if (!passwordField.value.trim() && isEditPasswordEnabledField.value === 'false') {
                passwordField.value = originalPassword; // Restore old password if unchanged
            }
        });

    </script>
}

