@using LittleArkFoundation.Areas.Admin.Models.Form
@using LittleArkFoundation.Areas.Admin.Models.FamilyComposition
@model FormViewModel
@{
    ViewData["Title"] = "Create Form";
    Layout = "_AdminLayout";
}

<style>
    .form-container {
        width: 100%;
        max-width: 1200px;
        margin: auto;
        border: 1px solid #000;
        padding: 20px;
    }

    table {
        font-size: small;
        width: 100%;
        border-collapse: collapse;
    }

    th, td {
        border: 1px solid black;
        padding: 5px;
        text-align: left;
        font-size: medium;
    }

    .section-title {
        background-color: #f2f2f2;
        font-weight: bold;
        padding: 5px;
        text-align: center;
    }

    input, select {
        width: 98%;
        font-size: medium;
        padding: 5px;
        transition: transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out;
    }

    .required {
        color: red;
        font-weight: bold;
    }

    .checkbox-group, .radio-group {
        display: flex;
        align-items: center;
        gap: 10px; /* Adjust spacing between checkbox/radio and text */
        margin-bottom: 5px;
    }

        .checkbox-group input[type="checkbox"],
        .radio-group input[type="radio"] {
            transform: scale(1.2); /* Slightly increase size for better visibility */
            padding: 0;
            margin: 0;
            width: 2rem;
        }

    .mentalhealth-input input:hover, .mentalhealth-input input:focus,
    .mentalhealth-input select:hover, .mentalhealth-input select:focus,
    .hospitalizaiton-input input:hover, .hospitalizaiton-input input:focus,
    .hospitalizaiton-input select:hover, .hospitalizaiton-input select:focus,
    .medication-input input:hover, .medication-input input:focus,
    .medication-input select:hover, .medication-input select:focus,
    .diagnosis-input input:hover, .diagnosis-input input:focus,
    .diagnosis-input select:hover, .diagnosis-input select:focus,
    .family-input input:hover, .family-input input:focus,
    .family-input select:hover, .family-input select:focus {
        transform: scale(1.2); /* Slightly enlarges the input field */
        box-shadow: 0 0 8px rgba(0, 0, 0, 0.2); /* Adds a subtle glow */
        z-index: 10; /* Ensures it appears above other elements */
        position: relative;
        width: 10rem;
    }

    textarea {
        width: 100%;
    }

    .invalid-highlight {
        outline: 2px solid red;
        background-color: #ffe6e6;
        border-radius: 4px;
    }

    input[type="radio"].invalid-highlight,
    input[type="checkbox"].invalid-highlight {
        outline: 2px solid red;
        box-shadow: 0 0 0 2px red;
    }

</style>

<div class="mt-2">
    <a class="btn btn-outline-secondary mb-3" asp-action="Index"
       onclick="return confirm('Are you sure you want to exit this page?');">← Back to List</a>
</div>

<form asp-action="Create" method="post" enctype="multipart/form-data" novalidate>
    @Html.AntiForgeryToken()
    <div class="form-container">

        <div class="accordion" id="formAccordion">

            <div class="accordion-item" id="page1">
                <h2 class="accordion-header" id="headingPage1">
                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage1" aria-expanded="true" aria-controls="collapsePage1">
                        Page 1
                    </button>
                </h2>
                <div id="collapsePage1" class="accordion-collapse collapse show" aria-labelledby="headingPage1">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page1Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page2">
                <h2 class="accordion-header" id="headingPage2">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage2" aria-expanded="false" aria-controls="collapsePage2">
                        Page 2
                    </button>
                </h2>
                <div id="collapsePage2" class="accordion-collapse collapse" aria-labelledby="headingPage2">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page2Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page3">
                <h2 class="accordion-header" id="headingPage3">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage3" aria-expanded="false" aria-controls="collapsePage3">
                        Page 3
                    </button>
                </h2>
                <div id="collapsePage3" class="accordion-collapse collapse" aria-labelledby="headingPage3">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page3Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page4">
                <h2 class="accordion-header" id="headingPage4">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage4" aria-expanded="false" aria-controls="collapsePage4">
                        Page 4
                    </button>
                </h2>
                <div id="collapsePage4" class="accordion-collapse collapse" aria-labelledby="headingPage4">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page4Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page5">
                <h2 class="accordion-header" id="headingPage5">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage5" aria-expanded="false" aria-controls="collapsePage5">
                        Page 5
                    </button>
                </h2>
                <div id="collapsePage5" class="accordion-collapse collapse" aria-labelledby="headingPage5">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page5Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page6">
                <h2 class="accordion-header" id="headingPage6">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage6" aria-expanded="false" aria-controls="collapsePage6">
                        Page 6
                    </button>
                </h2>
                <div id="collapsePage6" class="accordion-collapse collapse" aria-labelledby="headingPage6">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page6Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page7">
                <h2 class="accordion-header" id="headingPage7">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage7" aria-expanded="false" aria-controls="collapsePage7">
                        Page 7
                    </button>
                </h2>
                <div id="collapsePage7" class="accordion-collapse collapse" aria-labelledby="headingPage7">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page7Create", Model)
                    </div>
                </div>
            </div>

            <div class="accordion-item" id="page8">
                <h2 class="accordion-header" id="headingPage8">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage8" aria-expanded="false" aria-controls="collapsePage8">
                        Page 8
                    </button>
                </h2>
                <div id="collapsePage8" class="accordion-collapse collapse" aria-labelledby="headingPage8">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page8Create", Model)
                    </div>
                </div>
            </div>

            @* <div class="accordion-item" id="page9">
                <h2 class="accordion-header" id="headingPage9">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapsePage9" aria-expanded="false" aria-controls="collapsePage9">
                        Page 9
                    </button>
                </h2>
                <div id="collapsePage9" class="accordion-collapse collapse" aria-labelledby="headingPage9">
                    <div class="accordion-body">
                        @await Html.PartialAsync("Partials/_Page9Create", Model)
                    </div>
                </div>
            </div> *@

        </div>

        <div class="mt-2" style="text-align: center;">
            <button type="submit" class="btn btn-sm btn-primary">Submit</button>
        </div>
        <div class="mt-2" style="text-align: center;">
            <a class="btn btn-sm btn-outline-primary" asp-action="Index">← Back to List</a>
        </div>
    </div>
</form>

@section Scripts {
    <script>
        // Get today's date in YYYY-MM-DD format
        const today = new Date().toISOString().split('T')[0];
        document.getElementById("dateInput").value = today;

        // Get current time in HH:MM format
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        document.getElementById("timeInput").value = `${hours}:${minutes}`;

        function addRow(button) {
            if (button.id == "family-button-add") {

                let table = document.getElementById("family-table");

                if (table.rows.length - 1 == 12){
                    alert("Only 12 rows allowed");
                    return;
                }

                let rowCount = table.rows.length - 1; // Exclude header row
                //let rowCount = table.rows.length; // Includes header, so first row starts at 1
                let newRow = table.insertRow(-1); // Insert at the end

                let cols = `
                    <td><input type="text" name="FamilyMembers[${rowCount}].Name" required></td>
                    <td><input type="number" name="FamilyMembers[${rowCount}].Age" required></td>
                    <td><input type="date" name="FamilyMembers[${rowCount}].DateOfBirth" required></td>
                    <td><input type="text" name="FamilyMembers[${rowCount}].CivilStatus" required></td>
                    <td><input type="text" name="FamilyMembers[${rowCount}].RelationshipToPatient" required></td>
                    <td>
                        <select name="FamilyMembers[${rowCount}].LivingWithChild" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td><input type="text" name="FamilyMembers[${rowCount}].EducationalAttainment" required></td>
                    <td><input type="text" name="FamilyMembers[${rowCount}].Occupation" required></td>
                    <td><input type="number" name="FamilyMembers[${rowCount}].MonthlyIncome" required></td>
                    <td><button type="button" id="family-button-remove" onclick="removeRow(this)">❌</button></td>
                `;
                newRow.innerHTML = cols;

            }
            else if (button.id == "diagnosis-button-add") {

                let table = document.getElementById("diagnosis-table");

                if (table.rows.length - 1 == 3){
                    alert("Only 3 rows allowed");
                    return;
                }

                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                let cols = `
                    <td><input type="text" name="Diagnoses[${rowCount}].MedicalCondition" required></td>
                    <td>
                        <select name="Diagnoses[${rowCount}].ReceivingTreatment" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td><input type="text" name="Diagnoses[${rowCount}].TreatmentProvider" required></td>
                    <td>
                        <select name="Diagnoses[${rowCount}].DoesCauseStressOrImpairment" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td><input type="text" name="Diagnoses[${rowCount}].TreatmentHelp" required></td>
                    <td><button type="button" id="diagnosis-button-remove" onclick="removeRow(this)">❌</button></td>
                `;

                newRow.innerHTML = cols;
            }
            else if (button.id == "medication-button-add") {

                let table = document.getElementById("medication-table");

                if (table.rows.length - 1 == 3){
                    alert("Only 3 rows allowed");
                    return;
                }

                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                let cols = `
                    <td><input type="text" name="Medications[${rowCount}].Medication" required></td>
                    <td><input type="text" name="Medications[${rowCount}].Dosage" required></td>
                    <td><input type="text" name="Medications[${rowCount}].Frequency" required></td>
                    <td><input type="text" name="Medications[${rowCount}].PrescribedBy" required></td>
                    <td><input type="text" name="Medications[${rowCount}].ReasonForMedication" required></td>
                    <td><button type="button" id="medication-button-remove" onclick="removeRow(this)">❌</button></td>
                `;

                newRow.innerHTML = cols;
            }
            else if (button.id == "hospitalization-button-add") {
                let table = document.getElementById("hospitalization-table");

                if (table.rows.length - 1 == 3){
                    alert("Only 3 rows allowed");
                    return;
                }

                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                let cols = `
                    <td><input type="text" name="HospitalizationHistory[${rowCount}].Reason" required></td>
                    <td><input type="date" name="HospitalizationHistory[${rowCount}].Date" required></td>
                    <td><input type="text" name="HospitalizationHistory[${rowCount}].Location" required></td>
                    <td><button type="button" id="hospitalization-button-remove" onclick="removeRow(this)">❌</button></td>
                `;

                newRow.innerHTML = cols;
            }
            else if (button.id == "mentalhealth-button-add") {
                let table = document.getElementById("mentalhealth-table");

                if (table.rows.length - 1 == 3){
                    alert("Only 3 rows allowed");
                    return;
                }

                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                let cols = `
                    <td><input type="date" name="MentalHealthHistory[${rowCount}].DateOfService" required></td>
                    <td><input type="text" name="MentalHealthHistory[${rowCount}].Provider" placeholder="Type N/A if no answer" required></td>
                    <td><textarea name="MentalHealthHistory[${rowCount}].ReasonForTreatment" rows="2" cols="30" placeholder="Type N/A if no answer" required></textarea></td>
                    <td>
                        <select name="MentalHealthHistory[${rowCount}].WereServicesHelpful" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td><button type="button" id="mentalhealth-button-remove" onclick="removeRow(this)">❌</button></td>
                `;

                newRow.innerHTML = cols;
            }
            else if (button.id == "familyhistory-button-add") {
                let table = document.getElementById("familyhistory-table");

                if (table.rows.length - 1 == 2){
                    alert("Only 2 rows allowed");
                    return;
                }

                let isSelfDropdown = "";
                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                // Get the value of the first cell in the LAST row (before inserting a new row)
                let lastRowIndex = table.rows.length - 2; // Adjust for zero-based index
                let lastRow = table.rows[lastRowIndex];

                if (lastRow && lastRow.cells[0].querySelector("select").value == "True") {
                    isSelfDropdown = `<option value="true" disabled>Self</option><option value="false">Others</option>`;
                } else {
                    isSelfDropdown = `<option value="true">Self</option><option value="false" disabled>Others</option>`;
                }

                let cols = `
                    <td>
                        <select name="FamilyHistory[${rowCount}].IsSelf" required>
                            ${isSelfDropdown}
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasDepression" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasAnxiety" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasBipolarDisorder" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasSchizophrenia" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasADHD_ADD" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasTraumaHistory" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasAbusiveBehavior" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasAlcoholAbuse" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasDrugAbuse" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td>
                        <select name="FamilyHistory[${rowCount}].HasIncarceration" required>
                            <option value="true">Yes</option>
                            <option value="false">No</option>
                        </select>
                    </td>
                    <td><button type="button" id="familyhistory-button-remove" onclick="removeRow(this)">❌</button></td>`;

                newRow.innerHTML = cols;
            }
            else if (button.id == "progressnotes-button-add"){
                let table = document.getElementById("progressnotes-table");

                let rowCount = table.rows.length - 1; // Exclude header row
                let newRow = table.insertRow(-1);

                let cols = `
                    <td>
                        <input type="date" name="ProgressNotes[${rowCount}].Date" required>
                    </td>
                    <td>
                        <textarea name="ProgressNotes[${rowCount}].ProgressNotes" rows="2" cols="30" placeholder="Type N/A if no answer" required></textarea>
                    </td>
                    <td>
                        <input type="hidden" name="ProgressNotes[${rowCount}].Attachment" />
                        <input type="hidden" name="ProgressNotes[${rowCount}].AttachmentContentType" />
                        <input type="file" name="ProgressNotes[${rowCount}].AttachmentFile"
                            id="uploadedFile-${rowCount}"
                            accept=".pdf,image/*"
                            class="form-control mb-2"
                            onchange="handleFileUpload(this, ${rowCount})" />
                        <input type="hidden" name="ProgressNotes[${rowCount}].RemoveAttachment" id="removeAttachment-${rowCount}" />
                        <div id="previewContainer-${rowCount}" class="mt-2" style="display: none;">
                            <button type="button" class="btn btn-secondary" data-bs-toggle="modal" data-bs-target="#filePreviewModal-${rowCount}">
                                View File
                            </button>
                            <button type="button" class="btn btn-danger ms-2" onclick="removeFile(${rowCount})">Remove File</button>
                        </div>

                        <!-- Modal will be blank initially -->
                        <div class="modal fade" id="filePreviewModal-${rowCount}" tabindex="-1" aria-labelledby="filePreviewModalLabel-${rowCount}" aria-hidden="true">
                            <div class="modal-dialog modal-xl modal-dialog-centered">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title" id="filePreviewModalLabel-${rowCount}">File Preview</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                                    </div>
                                    <div class="modal-body text-center" id="filePreviewContent-${rowCount}">
                                        <!-- Populated by handleFileUpload() -->
                                    </div>
                                </div>
                            </div>
                        </div>
                    </td>
                    <td><button type="button" id="progressnotes-button-remove" onclick="removeRow(this)">❌</button></td>
                `;

                newRow.innerHTML = cols;
            }

        }

        function removeRow(button) {
            if (button.id == "family-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("family-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "diagnosis-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("diagnosis-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "medication-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("medication-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "hospitalization-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("hospitalization-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "mentalhealth-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("mentalhealth-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "familyhistory-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("familyhistory-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }
            else if (button.id == "progressnotes-button-remove") {
                let row = button.parentNode.parentNode;
                let table = document.getElementById("progressnotes-table");

                if (table.rows.length > 2) { // Keep at least one row
                    row.remove();
                    updateNames(button);
                } else {
                    alert("At least one row is required!");
                }
            }

        }

        function updateNames(button) {
            if (button.id == "family-button-remove") {
                let table = document.getElementById("family-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("input").name = `FamilyMembers[${i - 1}].Name`;
                    row.cells[1].querySelector("input").name = `FamilyMembers[${i - 1}].Age`;
                    row.cells[2].querySelector("input").name = `FamilyMembers[${i - 1}].DateOfBirth`;
                    row.cells[3].querySelector("input").name = `FamilyMembers[${i - 1}].CivilStatus`;
                    row.cells[4].querySelector("input").name = `FamilyMembers[${i - 1}].RelationshipToPatient`;
                    row.cells[5].querySelector("select").name = `FamilyMembers[${i - 1}].LivingWithChild`;
                    row.cells[6].querySelector("input").name = `FamilyMembers[${i - 1}].EducationalAttainment`;
                    row.cells[7].querySelector("input").name = `FamilyMembers[${i - 1}].Occupation`;
                    row.cells[8].querySelector("input").name = `FamilyMembers[${i - 1}].MonthlyIncome`;
                }
            }
            else if (button.id == "diagnosis-button-remove") {
                let table = document.getElementById("diagnosis-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("input").name = `Diagnoses[${i - 1}].MedicalCondition`;
                    row.cells[1].querySelector("select").name = `Diagnoses[${i - 1}].ReceivingTreatment`;
                    row.cells[2].querySelector("input").name = `Diagnoses[${i - 1}].TreatmentProvider`;
                    row.cells[3].querySelector("select").name = `Diagnoses[${i - 1}].DoesCauseStressOrImpairment`;
                    row.cells[4].querySelector("input").name = `Diagnoses[${i - 1}].TreatmentHelp`;
                }
            }
            else if (button.id == "medication-button-remove") {
                let table = document.getElementById("medication-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("input").name = `Medications[${i - 1}].Medication`;
                    row.cells[1].querySelector("input").name = `Medications[${i - 1}].Dosage`;
                    row.cells[2].querySelector("input").name = `Medications[${i - 1}].Frequency`;
                    row.cells[3].querySelector("input").name = `Medications[${i - 1}].PrescribedBy`;
                    row.cells[4].querySelector("input").name = `Medications[${i - 1}].ReasonForMedication`;
                }
            }
            else if (button.id == "hospitalization-button-remove") {
                let table = document.getElementById("hospitalization-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("input").name = `HospitalizationHistory[${i - 1}].Reason`;
                    row.cells[1].querySelector("input").name = `HospitalizationHistory[${i - 1}].Date`;
                    row.cells[2].querySelector("input").name = `HospitalizationHistory[${i - 1}].Location`;
                }
            }
            else if (button.id == "mentalhealth-button-remove") {
                let table = document.getElementById("mentalhealth-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("input").name = `MentalHealthHistory[${i - 1}].DateOfService`;
                    row.cells[1].querySelector("input").name = `MentalHealthHistory[${i - 1}].Provider`;
                    row.cells[2].querySelector("textarea").name = `MentalHealthHistory[${i - 1}].ReasonForTreatment`;
                    row.cells[3].querySelector("select").name = `MentalHealthHistory[${i - 1}].WereServicesHelpful`;
                }
            }
            else if (button.id == "familyhistory-button-remove") {
                let table = document.getElementById("familyhistory-table");
                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    row.cells[0].querySelector("select").name = `FamilyHistory[${i - 1}].IsSelf`;
                    row.cells[1].querySelector("select").name = `FamilyHistory[${i - 1}].HasDepression`;
                    row.cells[2].querySelector("select").name = `FamilyHistory[${i - 1}].HasAnxiety`;
                    row.cells[3].querySelector("select").name = `FamilyHistory[${i - 1}].HasBipolarDisorder`;
                    row.cells[4].querySelector("select").name = `FamilyHistory[${i - 1}].HasSchizophrenia`;
                    row.cells[5].querySelector("select").name = `FamilyHistory[${i - 1}].HasADHD_ADD`;
                    row.cells[6].querySelector("select").name = `FamilyHistory[${i - 1}].HasTraumaHistory`;
                    row.cells[7].querySelector("select").name = `FamilyHistory[${i - 1}].HasAbusiveBehavior`;
                    row.cells[8].querySelector("select").name = `FamilyHistory[${i - 1}].HasAlcoholAbuse`;
                    row.cells[9].querySelector("select").name = `FamilyHistory[${i - 1}].HasDrugAbuse`;
                    row.cells[10].querySelector("select").name = `FamilyHistory[${i - 1}].HasIncarceration`;
                }
            }
            else if (button.id == "progressnotes-button-remove") {
                let table = document.getElementById("progressnotes-table");

                for (let i = 1; i < table.rows.length; i++) { // Skip header row
                    let row = table.rows[i];
                    let index = i - 1;

                    // Update basic fields
                    row.cells[0].querySelector("input").name = `ProgressNotes[${index}].Date`;
                    row.cells[1].querySelector("textarea").name = `ProgressNotes[${index}].ProgressNotes`;

                    // Update file input and associated elements
                    const fileInput = row.cells[2].querySelector("input[type='file']");
                    const previewContainer = row.cells[2].querySelector("div[id^='previewContainer']");
                    const previewButton = previewContainer?.querySelector("button");
                    const modal = row.cells[2].querySelector("div.modal");

                    fileInput.name = `ProgressNotes[${index}].AttachmentFile`;
                    fileInput.id = `uploadedFile-${index}`;
                    fileInput.setAttribute("onchange", `handleFileUpload(this, ${index})`);

                    if (previewContainer) {
                        previewContainer.id = `previewContainer-${index}`;
                    }

                    if (previewButton) {
                        previewButton.setAttribute("data-bs-target", `#filePreviewModal-${index}`);
                    }

                    if (modal) {
                        modal.id = `filePreviewModal-${index}`;
                        const label = modal.querySelector(".modal-title");
                        const body = modal.querySelector(".modal-body");

                        if (label) label.id = `filePreviewModalLabel-${index}`;
                        if (body) body.id = `filePreviewContent-${index}`;
                    }
                }
            }
        }

        document.addEventListener("input", function() {
            let total = 0;
            document.querySelectorAll(".expense").forEach(input => {
                total += Number(input.value) || 0;
            });
            document.getElementById("total-expenses").value = total;
        });

        function toggleRequired(checkbox) {
            let inputField = checkbox.nextElementSibling; // The input field next to the checkbox

            if (checkbox.checked) {
                inputField.required = true;
                inputField.disabled = false;
            } else {
                inputField.required = false;
                inputField.disabled = true;
                inputField.value = ""; // Clear value when unchecked
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll('input[type="radio"][data-target]').forEach(radio => {
                let inputField = document.getElementById(radio.getAttribute("data-target"));

                if (radio.checked && radio.value !== "Others" && inputField) {
                    inputField.disabled = false;
                    inputField.required = true;
                    inputField.value = radio.value; // Set stored value for "Others"
                }
            });
        });

        function toggleRequiredRadio(radio) {
            let targetId = radio.getAttribute("data-target");
            let inputField = document.getElementById(targetId);

            // Disable all "Others" input fields within the same radio group
            document.getElementsByName(radio.name).forEach(r => {
                let field = document.getElementById(r.getAttribute("data-target"));
                if (field) {
                    field.disabled = true;
                    field.required = false;
                    field.value = ""; // Clear value when another radio is selected
                }
            });

            // Enable the "Others" input field only when selected
            if (inputField && radio.value === "Others") {
                inputField.disabled = false;
                inputField.required = true;
            }
            else if (inputField) {
                inputField.disabled = false;
                inputField.required = true;
            }
        }

        function toggleRequiredCheckbox(checkbox) {
            let targetId = checkbox.getAttribute("data-target");
            let inputField = document.getElementById(targetId);

            if (checkbox.checked) {
                inputField.disabled = false;
                inputField.required = true;
            }
            else {
                inputField.disabled = true;
                inputField.required = false;
                inputField.value = ""; // Clear value when unchecked
            }
        }

        function toggleRequiredGroupCheckbox(checkbox) {
            const targetClass = checkbox.getAttribute("data-target");
            const targets = document.querySelectorAll(`.${targetClass}`);

            targets.forEach(el => {
                if (checkbox.checked) {
                    el.disabled = false;
                    el.required = true;
                } else {
                    el.disabled = true;
                    el.required = false;
                    el.value = ""; // Clear value for inputs

                    // Also uncheck radio buttons
                    if (el.type === "radio") {
                        el.checked = false;
                    }
                }
            });
        }

        function updateOthersValue(input) {
            let radio = document.querySelector(`input[data-target="${input.id}"]`);

            if (radio.checked && input.value.trim() !== "") {
                radio.value = input.value.trim(); // Update radio value dynamically
            }
        }

        document.addEventListener("DOMContentLoaded", function () {
            const form = document.querySelector("form");

            form.addEventListener("submit", function (e) {

                const collapses = document.querySelectorAll(".accordion-collapse");

                // Forcefully show all collapsible sections (ignore Bootstrap JS)
                collapses.forEach(collapseEl => {
                    collapseEl.classList.add("show");
                    collapseEl.classList.remove("collapsing"); // in case it's stuck
                });

                // Count the number of invalid fields
                const invalidFields = form.querySelectorAll(":invalid");
                const errorCount = invalidFields.length;

                // If novalidate is present, we're in "first pass"
                if (form.hasAttribute("novalidate")) {
                    if (errorCount > 0) {
                        e.preventDefault();
                        alert(`You have ${errorCount} field(s) that need attention.`);

                        setTimeout(() => {
                            invalidFields.forEach(field => {
                                if ((field.type === "radio" || field.type === "checkbox") && field.name) {
                                    const group = form.querySelectorAll(`input[name="${field.name}"]`);
                                    group.forEach(input => {
                                        input.classList.add("invalid-highlight");
                                        const label = input.closest("label");
                                        if (label) label.classList.add("invalid-highlight");
                                    });
                                } else {
                                    field.classList.add("invalid-highlight");
                                }
                                  field.scrollIntoView({ behavior: "smooth", block: "center" });
                                  field.focus();
                              });
                        }, 100);


                        // Give DOM time to visually update
                        // setTimeout(() => {
                        //     form.removeAttribute("novalidate");
                        //     form.requestSubmit();
                        // }, 100);

                    }
                }

            });
        });

        function handleFileUpload(input, index) {
            const file = input.files[0];
            if (!file) return;

            const previewContainer = document.getElementById(`previewContainer-${index}`);
            const previewContent = document.getElementById(`filePreviewContent-${index}`);

            const fileReader = new FileReader();

            fileReader.onload = function (e) {
                const fileUrl = e.target.result;

                let previewHtml = '';
                if (file.type.startsWith('image/')) {
                    previewHtml = `<img src="${fileUrl}" class="img-fluid" alt="Preview Image" />`;
                } else if (file.type === 'application/pdf') {
                    previewHtml = `<embed src="${fileUrl}" type="application/pdf" width="100%" height="600px" />`;
                } else {
                    previewHtml = `<p>Preview not supported for this file type.</p>`;
                }

                previewContent.innerHTML = previewHtml;
                previewContainer.style.display = 'block';
            };

            fileReader.readAsDataURL(file); // Convert file to base64 for preview
        }

    </script>
}


