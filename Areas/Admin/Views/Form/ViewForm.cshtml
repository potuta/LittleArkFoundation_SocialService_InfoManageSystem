@using LittleArkFoundation.Areas.Admin.Models.Form
@model HtmlFormViewModel
@{
    ViewData["Title"] = "View Form";
    Layout = "_AdminLayout";
}

<style>
    .menu-bar a {
        min-width: 100px;
        text-align: center;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

    .header-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        margin-bottom: 1rem;
    }

        .header-bar h2 {
            margin-bottom: 0;
        }


    .form-page {
        box-shadow: 0px 0px 15px #cbcbcb;
    }
</style>

<div class="header-bar">
    <h2>View Form</h2>

    <div class="menu-bar d-flex gap-2">
        <!-- Main -->
        <a class="btn btn-outline-dark @(
           ViewContext.RouteData.Values["controller"]?.ToString() == "Form" &&
           (
               ViewContext.RouteData.Values["action"]?.ToString() == "Index" ||
               ViewContext.RouteData.Values["action"]?.ToString() == "SortBy" ||
               ViewContext.RouteData.Values["action"]?.ToString() == "Search" ||
		       ViewContext.RouteData.Values["action"]?.ToString() == "ViewForm"
           ) ? "active" : "")"
           asp-action="Index" asp-controller="Form">Main</a>

        <!-- General -->
        <a class="btn btn-outline-dark @(
                      ViewContext.RouteData.Values["controller"]?.ToString() == "GeneralAdmission"
                      ? "active" : "")"
           asp-action="Index" asp-controller="GeneralAdmission">General</a>

        <a class="btn btn-outline-dark @(
            ViewContext.RouteData.Values["controller"]?.ToString() == "GeneralAdmission" &&
            (
                ViewContext.RouteData.Values["action"]?.ToString() == "Reports" ||
                ViewContext.RouteData.Values["action"]?.ToString() == "SortByReports"
            ) ? "active" : "")"
        asp-action="Reports" asp-controller="GeneralAdmission">Reports</a>

        <!-- Statistics -->
        <a class="btn btn-outline-dark @(
                               ViewContext.RouteData.Values["controller"]?.ToString() == "GeneralAdmission" &&
                                   (
                                       ViewContext.RouteData.Values["action"]?.ToString() == "Statistics" ||
                                       ViewContext.RouteData.Values["action"]?.ToString() == "SortByStatistics"
                                   ) ? "active" : "")"
           asp-action="Statistics" asp-controller="GeneralAdmission">Statistics</a>
    </div>
</div>
<hr />

<!-- Back to List -->
<div class="mt-2">
    <a class="btn btn-outline-secondary mb-3" asp-controller="Form" asp-action="Index">← Back to List</a>
</div>

<div class="d-flex justify-content-center align-items-center">
    <!-- Page Containers -->
    @for (int i = 0; i < Model.HtmlPages.Count; i++)
    {
        <div id="page@(i + 1)" class="form-page" style="display: @(i == 0 ? "block" : "none")">
            @Html.Raw(Model.HtmlPages[i])
        </div>
    }
</div>

<div class="d-flex justify-content-center align-items-center">
    <!-- Navigation Buttons -->
    <div class="btn-group btn-group-sm mt-3" role="group" aria-label="Small button group">
        <button type="button" id="prevPage" class="btn btn-outline-dark" onclick="changePage(-1)" disabled><</button>

        @for (int i = 0; i < Model.HtmlPages.Count; i++)
        {
            <button type="button" id="navPage@(i + 1)" class="btn btn-outline-dark @(i == 0 ? "active" : "")" onclick="jumpToPage(@(i + 1))">@(@i + 1)</button>
        }

        <button type="button" id="nextPage" class="btn btn-outline-dark" onclick="changePage(1)">></button>
    </div>
</div>

<div class="d-flex justify-content-center align-items-center mt-3 gap-2">
    <!-- Form for PDF Download -->

    @if (Model.isActive)
    {
        if (Model.isLatestAssessment)
        {
            if (User.HasClaim("Permission", "EditForm"))
            {
                <a class="btn btn-sm btn-success hide-when-archived" asp-action="Edit" asp-route-id="@Model.Id" asp-route-assessmentID="@Model.AssessmentID"
                    data-bs-toggle="tooltip"
                    title="Edit">
                    <i class="bx bx-edit"></i> Edit
                </a>
            }
            else
            {
                <a class="btn btn-success text-muted hide-when-archived"
                    style="cursor: not-allowed;"
                    aria-disabled="true"
                    tabindex="-1"
                    title="You do not have permission to Edit">
                    <i class="bx bx-edit"></i> Edit
                </a>
            }
        }
    }

    <a class="btn btn-sm btn-primary" asp-action="DownloadPDF" asp-route-id="@Model.Id" asp-route-assessmentID="@Model.AssessmentID"
       data-bs-toggle="tooltip"
       title="Print">
        <i class="bi bi-file-earmark-arrow-down"></i> Download
    </a>

    <a class="btn btn-sm btn-dark"
       data-bs-toggle="modal"
       data-bs-target="#filePreviewModal"
       data-url="@Url.Action("DownloadPDF", "Form", new { id = Model.Id, assessmentID = Model.AssessmentID, isPrint = true })"
       data-type="pdf"
       title="Print">
        <i class="bi bi-printer"></i> Print
    </a>

</div>

@section Scripts {
    <script>
        let currentPage = 1;
        const totalPages = @Model.HtmlPages.Count;

        function changePage(step) {
            document.getElementById(`page${currentPage}`).style.display = "none";
            currentPage += step;
            document.getElementById(`page${currentPage}`).style.display = "block";

            for (let i = 1; i <= totalPages; i++) {
                document.getElementById(`navPage${i}`).classList.remove("active");
            }

            document.getElementById(`navPage${currentPage}`).classList.add("active");

            document.getElementById("prevPage").disabled = currentPage === 1;
            document.getElementById("nextPage").disabled = currentPage === totalPages;
        }

        function jumpToPage(pageNum) {
            document.getElementById(`page${currentPage}`).style.display = "none";
            currentPage = pageNum;
            document.getElementById(`page${currentPage}`).style.display = "block";

            for (let i = 1; i <= totalPages; i++) {
                document.getElementById(`navPage${i}`).classList.remove("active");
            }

            document.getElementById(`navPage${currentPage}`).classList.add("active");

            document.getElementById("prevPage").disabled = currentPage === 1;
            document.getElementById("nextPage").disabled = currentPage === totalPages;
        }
    </script>
}
