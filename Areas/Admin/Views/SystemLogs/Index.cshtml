@using LittleArkFoundation.Areas.Admin.Models.SystemLogs
@model LogsViewModel
@{
	ViewData["Title"] = "System Logs";
	Layout = "_AdminLayout";
    string? sortBy = ViewBag.sortBy ?? "";
    string? sortByMonth = ViewBag.sortByMonth ?? "";
}

<h2>System Logs</h2>
<hr />

@* Search *@
<div class="d-flex justify-content-between align-items-start flex-wrap gap-2 mb-3">
    <div class="search-container" style="width: 100%">
        <form asp-action="Search" asp-controller="SystemLogs" >
            <div class="input-group">
                <input type="hidden" name="page" value="@Model.CurrentPage"/>
				<input type="hidden" name="pageSize" value="@Model.PageSize" />
                <input type="date" name="searchString" class="form-control" placeholder="Search by Date" aria-label="Search" value="@sortByMonth">
                <button type="submit" class="btn btn-dark">Search</button>
            </div>
        </form>
        <a class="btn btn-primary" asp-action="Index" asp-controller="SystemLogs">Back to Full List</a>
    </div>
</div>

<div class="d-flex justify-content-end align-items-center">
@* Right toggles/buttons *@
    <div class="btn-group">
        <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle d-flex align-items-center gap-1 me-2" data-bs-toggle="dropdown" aria-expanded="false">
            @if (string.IsNullOrEmpty(sortBy))
            {
                <span class="mb-0">Filter by Level</span>
            }
            else
            {
                <span class="mb-0">@sortBy</span>
            }
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            <li>
                <a class="dropdown-item" asp-action="SortBy" asp-controller="SystemLogs" asp-route-level="" asp-route-sortByMonth="@sortByMonth"
                   asp-route-page="@Model.CurrentPage" asp-route-pageSize="@Model.PageSize">
                All
                </a>
            </li>
            @{
                var levels = new List<string>
                {
                    "Information",
                    "Error",
                    "Warning"
                };
            }
            @foreach (var level in levels)
            {
                <li>
                    <a class="dropdown-item" asp-action="SortBy" asp-controller="SystemLogs" asp-route-level="@level" asp-route-sortByMonth="@sortByMonth"
                       asp-route-page="@Model.CurrentPage" asp-route-pageSize="@Model.PageSize">
                        @level
                    </a>
                </li>
            }
        </ul>
    </div>
</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert" style="width: 60%;">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" style="width: 60%;">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="container-fluid px-0 mx-0 mb-3" style="max-width: 1400px;">
    <div class="table-responsive" style="overflow-x: auto;">
        <table class="table" style="min-width: 1200px;">
            <thead>
                @if (Model != null)
                {
                    <tr>
                        <th>Id</th>
                        <th>Message</th>
                        <th>Level</th>
                        <th>TimeStamp</th>
                    </tr>
                }
            </thead>
            <tbody>
                @if (Model != null)
                {
                    @foreach (var log in Model.LogsList)
                    {
                        <tr>
                            <th>@log.Id</th>
                            <th>@log.Message</th>
                            <th>@log.Level</th>
                            <th>@log.TimeStamp</th>
                        </tr>
                    }
                }
            </tbody>
        </table>
    </div>
</div>

@{
    int totalPages = Model.TotalPages;
    int currentPage = Model.CurrentPage;
    int pageWindow = 5; // how many pages to show around current page
    int startPage = Math.Max(1, currentPage - pageWindow / 2);
    int endPage = Math.Min(totalPages, startPage + pageWindow - 1);
    if (endPage - startPage < pageWindow)
    {
        startPage = Math.Max(1, endPage - pageWindow + 1);
    }
}
<div class="container-fluid px-0 mx-0" style="max-width: 1400px;">
    @if (totalPages > 1)
    {
        <nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center flex-nowrap">
                <!-- Previous button -->
                <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                    <a class="page-link" aria-label="Previous" asp-action="Index" asp-route-page="@(currentPage - 1)" asp-route-pageSize="@Model.PageSize" asp-route-sortByMonth="@sortByMonth">
                        <span aria-hidden="true">&laquo;</span>
                        <span class="sr-only"></span>
                    </a>
                </li>

                <!-- First page -->
                @if (startPage > 1)
                {
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="1" asp-route-pageSize="@Model.PageSize" asp-route-sortByMonth="@sortByMonth">1</a>
                    </li>
                    @if (startPage > 2)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                }

                <!-- Middle pages -->
                @for (int i = startPage; i <= endPage; i++)
                {
                    <li class="page-item @(currentPage == i ? "active" : "")">
                        <a class="page-link" asp-action="Index" asp-route-page="@i" asp-route-pageSize="@Model.PageSize" asp-route-sortByMonth="@sortByMonth">@i</a>
                    </li>
                }

                <!-- Last page -->
                @if (endPage < totalPages)
                {
                    @if (endPage < totalPages - 1)
                    {
                        <li class="page-item disabled"><span class="page-link">...</span></li>
                    }
                    <li class="page-item">
                        <a class="page-link" asp-action="Index" asp-route-page="@totalPages" asp-route-pageSize="@Model.PageSize" asp-route-sortByMonth="@sortByMonth">@totalPages</a>
                    </li>
                }

                <!-- Next button -->
                <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                    <a class="page-link" aria-label="Next" asp-action="Index" asp-route-page="@(currentPage + 1)" asp-route-pageSize="@Model.PageSize" asp-route-sortByMonth="@sortByMonth">
                        <span aria-hidden="true">&raquo;</span>
                        <span class="sr-only"></span>
                    </a>
                </li>
            </ul>
        </nav>
    }
</div>

<div class="d-flex flex-column align-items-center gap-2 mb-3">

    <!-- Page size dropdown below -->
    <div class="mx-auto">
        <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle d-flex align-items-center gap-1 me-2" data-bs-toggle="dropdown" aria-expanded="false">
            per page: <span class="mb-0">@(Model.PageSize > Model.TotalCount ? Model.TotalCount : Model.PageSize)</span>
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            @if (Model.TotalCount >= 10)
            {
                <li><a class="dropdown-item" asp-action="Index" asp-controller="SystemLogs" asp-route-sortByMonth="@sortByMonth" asp-route-page="1" asp-route-pageSize="10">10</a></li>
            }
            @if (Model.TotalCount >= 20)
            {
                <li><a class="dropdown-item" asp-action="Index" asp-controller="SystemLogs" asp-route-sortByMonth="@sortByMonth" asp-route-page="1" asp-route-pageSize="20">20</a></li>
            }
            @if (Model.TotalCount >= 50)
            {
                <li><a class="dropdown-item" asp-action="Index" asp-controller="SystemLogs" asp-route-sortByMonth="@sortByMonth" asp-route-page="1" asp-route-pageSize="50">50</a></li>
            }
            @if (Model.TotalCount >= 100)
            {
                <li><a class="dropdown-item" asp-action="Index" asp-controller="SystemLogs" asp-route-sortByMonth="@sortByMonth" asp-route-page="1" asp-route-pageSize="100">100</a></li>
            }
            @if (Model.TotalCount > 100)
            {
                <li>
                    <a class="dropdown-item" asp-action="Index" asp-controller="SystemLogs" asp-route-sortByMonth="@sortByMonth" asp-route-page="1" asp-route-pageSize="@Model.TotalCount">
                        @Model.TotalCount
                    </a>
                </li>
            }
        </ul>
    </div>

    <div style="font-size: 13px;">
        <span class="text-muted">Showing @Model.LogsList.Count of @(Model.TotalCount == 0 ? Model.LogsList.Count : Model.TotalCount) items</span>
    </div>
</div>


