@model LittleArkFoundation.Areas.Admin.Models.OPD.OPDViewModel
@{
    ViewData["Title"] = "Statistics";
    Layout = "_AdminLayout";
    string? sortBy = ViewBag.sortBy ?? "";
    string? sortByUserID = ViewBag.sortByUserID ?? "";
    string? sortByMonth = ViewBag.sortByMonth ?? "";
    bool matchedUser = Model.Users.Any(u => u.Username == sortBy);

}

<style>
    .menu-bar a {
        min-width: 100px;
        text-align: center;
        transition: background-color 0.2s ease, color 0.2s ease;
    }

    .header-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        margin-bottom: 1rem;
    }

        .header-bar h2 {
            margin-bottom: 0;
        }

</style>

<div class="header-bar">
    <h2>OPD Statistics</h2>

    <div class="menu-bar d-flex gap-2">
        <a class="btn btn-outline-dark @(
           ViewContext.RouteData.Values["action"]?.ToString() == "Index" ||
           ViewContext.RouteData.Values["action"]?.ToString() == "SortBy" ||
           ViewContext.RouteData.Values["action"]?.ToString() == "Search"
           ? "active" : "")"
           asp-action="Index" asp-controller="OPD">Main</a>

        <a class="btn btn-outline-dark @(ViewContext.RouteData.Values["action"]?.ToString() == "Reports" ? "active" : "")"
           asp-action="Reports" asp-controller="OPD">Reports</a>

        <a class="btn btn-outline-dark @(
                ViewContext.RouteData.Values["action"]?.ToString() == "Statistics" ||
                ViewContext.RouteData.Values["action"]?.ToString() == "SortByStatistics" ||
                ViewContext.RouteData.Values["action"]?.ToString() == "EditStatistics" 
                ? "active" : "")"
           asp-action="Statistics" asp-controller="OPD">Statistics</a>
    </div>
</div>
<hr />

<!-- Back to List -->
<div class="mt-2">
    <a class="btn btn-outline-secondary mb-3" asp-controller="OPD" asp-action="Index">← Back to List</a>
</div>

<div class="d-flex justify-content-between align-items-start flex-wrap gap-2 mb-3">
    @* Left toggles/buttons *@
    <div class="d-flex align-items-center gap-3">
        <a class="btn btn-success hide-when-archived" asp-action="EditStatistics" asp-controller="OPD">
            <i class="bx bx-edit"></i> Edit Your Statistics (@User.FindFirst(System.Security.Claims.ClaimTypes.Name).Value)
        </a>
    </div>

    @* Right toggles/buttons *@
    <div class="btn-group">
        <button type="button" class="btn btn-outline-secondary btn-sm dropdown-toggle d-flex align-items-center gap-1 me-2" data-bs-toggle="dropdown" aria-expanded="false">
            @if (string.IsNullOrEmpty(sortBy))
            {
                <span class="mb-0">Filter by MSW</span>
            }
            else
            {
                <span class="mb-0">@sortBy</span>
            }
        </button>
        <ul class="dropdown-menu dropdown-menu-end">
            <li>
                <a class="dropdown-item" asp-action="SortByStatistics"
                   asp-controller="OPD" asp-route-sortByUserID="" asp-route-sortByMonth="@sortByMonth"
                   asp-route-viewName="Statistics">All</a>
            </li>
            @foreach (var user in Model.Users)
            {
                <li>
                    <a class="dropdown-item" asp-action="SortByStatistics"
                       asp-controller="OPD" asp-route-sortByUserID="@user.UserID" asp-route-sortByMonth="@sortByMonth"
                       asp-route-viewName="Statistics">@user.Username</a>
                </li>
            }
        </ul>
        @* @if (matchedUser)
        {
            foreach (var user in Model.Users)
            {
                if (user.Username == sortBy)
                {
                    <a class="btn btn-sm btn-success" style="margin-left:5px;"
                       asp-action="ExportLogsheetToExcel"
                       asp-route-userID="@user.UserID">
                        Download Excel (@user.Username)
                    </a>
                }
            }
        }
        else
        {
            <a class="btn btn-sm btn-success" style="margin-left:5px;"
               asp-action="ExportLogsheetToExcel">
                Download Excel (All)
            </a>
        } *@

        @* Month filter *@
        <form method="get" asp-action="SortByStatistics" class="d-flex align-items-center gap-2">
            <input type="hidden" name="sortByUserID" value="@sortByUserID" />
            <input type="hidden" name="viewName" value="Statistics" />
            <input type="month" name="sortByMonth" class="form-control form-control-sm" value="@sortByMonth" />
            <button type="submit" class="btn btn-secondary btn-sm" style="width: 100%;">
                <i class="bi bi-filter"></i> Filter Month
            </button>
        </form>

        <button type="button" class="btn btn-success btn-sm" style="margin-left:5px;"
                data-bs-toggle="modal"
                data-bs-target="#exportModal"
                data-bs-toggle="tooltip"
                title="Download Excel">
            <i class="bi bi-file-earmark-arrow-down"></i> Download Excel
        </button>

        <!-- Download/Export Excel Modal -->
        <div class="modal fade" id="exportModal" tabindex="-1" aria-labelledby="exportModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <form asp-action="ExportOPDStatisticsToExcel" asp-controller="OPD" method="get">
                        <div class="modal-header">
                            <h5 class="modal-title" id="exportModalLabel">Export to Excel</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>

                        <div class="modal-body">
                            <div class="mb-3">
                                <label for="userID" class="form-label">MSW</label>
                                <select class="form-select" id="userID" name="userID">
                                    <option value="0">All</option>
                                    @foreach (var user in Model.Users)
                                    {
                                        <option value="@user.UserID">@user.Username</option>
                                    }
                                </select>
                            </div>

                            <div class="mb-3">
                                <label for="month" class="form-label">Month</label>
                                <input type="month" id="month" name="month" class="form-control">
                                <div class="form-text">Leave empty for "All Time"</div>
                            </div>
                        </div>

                        <div class="modal-footer">
                            <button type="submit" class="btn btn-success">Export</button>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>

    </div>

</div>

@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert" style="width: 60%;">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert" style="width: 60%;">
        @TempData["ErrorMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (string.IsNullOrEmpty(sortBy))
{
    <h4 style="margin-top: 15px;">All MSW</h4>
}
else
{
    <h4 style="margin-top: 15px;">@sortBy</h4>
}

<div class="container-fluid px-0 mx-0" style="max-width: 1600px;">
    <div class="table-responsive" style="overflow-x: auto;">
        <table class="table" style="min-width: 1200px;">
            <thead>
                @if (Model != null)
                {
                    <tr>
                        <th style="white-space: nowrap; font-weight: bold; text-align:center;">MONTH</th>
                        <th>JAN</th>
                        <th>FEB</th>
                        <th>MARCH</th>
                        <th>APRIL</th>
                        <th>MAY</th>
                        <th>JUNE</th>
                        <th>TOTAL</th>
                        <th>JULY</th>
                        <th>AUG</th>
                        <th>SEPT</th>
                        <th>OCT</th>
                        <th>NOV</th>
                        <th>DEC</th>
                        <th>TOTAL</th>
                    </tr>
                }
            </thead>
            <tbody>
                @if (Model != null)
                {
                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">I. SOURCE OF REFERRAL</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">Referring Party</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var sourceOfReferral = new Dictionary<string, string>
                    {
                                { "1. Government Hospital", "Govt. Hosp." },
                                { "2. Private Hospital", "Private/Clinic" },
                                { "3. Politicians", "Politicians" },
                                { "4. Media", "Media" },
                                { "5. Health Care Team", "Health Care Team" },
                                { "6. NGOs/Private Welfare Agencies", "NGO/Private Welfare" },
                                { "7. Government Agencies (DSWD, DOH Officials)", "Govt. Agencies" },
                                { "8. Walk-in", "Walk in" },
                                { "9. Others (employers, former pts, colleagues, friends)", "Others" },

					};

                    @foreach (var source in sourceOfReferral)
                    {
						var key = source.Key;
						var value = source.Value;

                        <tr>
                            <td style="white-space: nowrap;">@key</td>
                        
                            @for (int i = 1; i <= 6; i++)
                            {
                                var count = Model.OPDList.Count(m => m.SourceOfReferral.Equals(value, StringComparison.OrdinalIgnoreCase) && m.Date.Month == i);
                                <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                            }

                            <td style="white-space: nowrap;">
                                @(Enumerable.Range(1, 6).Sum(i => Model.OPDList.Count(m => m.SourceOfReferral.Equals(value, StringComparison.OrdinalIgnoreCase) && m.Date.Month == i)))
                            </td>

                            @for (int i = 7; i <= 12; i++)
                            {
                                var count = Model.OPDList.Count(m => m.SourceOfReferral.Equals(value, StringComparison.OrdinalIgnoreCase) && m.Date.Month == i);
                                <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                            }

                            <td style="white-space: nowrap;">
                                @(Enumerable.Range(7, 6).Sum(i => Model.OPDList.Count(m => m.SourceOfReferral.Equals(value, StringComparison.OrdinalIgnoreCase) && m.Date.Month == i)))
                            </td>
                        </tr>
					}

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold; text-align:center;">TOTAL</td>

                        @for (int i = 1; i <= 6; i++)
                        {
                            <td style="white-space: nowrap; font-weight: bold;">@Model.TotalSourcesMonthly[i]</td>
                        }

                        <td style="white-space: nowrap; font-weight: bold;">
                            @(Enumerable.Range(1, 6).Sum(i => Model.TotalSourcesMonthly[i]))
                        </td>

                        @for (int i = 7; i <= 12; i++)
                        {
                            <td style="white-space: nowrap; font-weight: bold;">@Model.TotalSourcesMonthly[i]</td>
                        }

                        <td style="white-space: nowrap; font-weight: bold;">
                            @(Enumerable.Range(7, 6).Sum(i => Model.TotalSourcesMonthly[i]))
                        </td>
                    </tr>

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">II. CASELOAD ACCORDING TO SERVICES</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">1. During Census</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">1.1 New Cases</td>

                        @for (int i = 1; i <= 6; i++)
                        {
                            var count = Model.OPDList.Count(m => !m.IsOld && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(1, 6).Sum(i => Model.OPDList.Count(m => !m.IsOld && m.Date.Month == i)))
                        </td>

                        @for (int i = 7; i <= 12; i++)
                        {
                            var count = Model.OPDList.Count(m => !m.IsOld && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(7, 6).Sum(i => Model.OPDList.Count(m => !m.IsOld && m.Date.Month == i)))
                        </td>
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">1.2 Old Cases</td>

                        @for (int i = 1; i <= 6; i++)
                        {
                            var count = Model.OPDList.Count(m => m.IsOld && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(1, 6).Sum(i => Model.OPDList.Count(m => m.IsOld && m.Date.Month == i)))
                        </td>

                        @for (int i = 7; i <= 12; i++)
                        {
                            var count = Model.OPDList.Count(m => m.IsOld && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(7, 6).Sum(i => Model.OPDList.Count(m => m.IsOld && m.Date.Month == i)))
                        </td>
                    </tr>

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("2. Closed Summary", "ii_ClosedSummary", Model))

                    <tr>
                        <td style="white-space: nowrap;">3. Number of patients based on sectoral groupings mandated by law/policies:</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">a. PWD</td>

                        @for (int i = 1; i <= 6; i++)
                        {
                            var count = Model.OPDList.Count(m => m.IsPWD && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(1, 6).Sum(i => Model.OPDList.Count(m => m.IsPWD && m.Date.Month == i)))
                        </td>

                        @for (int i = 7; i <= 12; i++)
                        {
                            var count = Model.OPDList.Count(m => m.IsPWD && m.Date.Month == i);
                            <td style="white-space: nowrap;">@(count == 0 ? "" : count)</td>
                        }

                        <td style="white-space: nowrap;">
                            @(Enumerable.Range(7, 6).Sum(i => Model.OPDList.Count(m => m.IsPWD && m.Date.Month == i)))
                        </td>
                    </tr>

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("b. Indigenous People", "ii_NoPatients_IndigenousPeople", Model))
                    @await Html.PartialAsync("Partials/_StatisticsRow", ("c. Government Workers", "ii_NoPatients_GovernmentWorkers", Model))

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">SERVICES</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">1. Planning, Screening and Eligibility Study / PSE</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("1.1 Socio Economic Classification", "ii_Planning_SocioEconomicClassification", Model))
                    @await Html.PartialAsync("Partials/_StatisticsRow", ("1.2 Pre-admission Planning", "ii_Planning_PreAdmissionPlanning", Model))
                    @await Html.PartialAsync("Partials/_StatisticsRow", ("1.3 Information Services/Orientation", "ii_Planning_InformationServices", Model))

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">2. Concrete and Referral Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("2.1 Provision of Discount", "ii_Concrete_ProvisionDiscount", Model))
                    @await Html.PartialAsync("Partials/_StatisticsRow", ("2.2 Facilitating Referrals", "ii_Concrete_FacilitatingReferrals", Model))

                    <tr>
                        <td style="white-space: nowrap;">2.2.1 Outgoing Referrals for:</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var outgoingReferrals = new Dictionary<string, string>
                                {
                                { "a. Medical Assistance", "ii_Concrete_OutgoingReferrals_MedicalAssistance" },
                                { "b. Discount on Procedure/Hospital Expenses", "ii_Concrete_OutgoingReferrals_DiscountProcedure" },
                                { "c. Transportation Fare", "ii_Concrete_OutgoingReferrals_TransportationFare" },
                                { "d. Institutional Placement", "ii_Concrete_OutgoingReferrals_InstitutionalPlacement" },
                                { "e. Temporary Shelter", "ii_Concrete_OutgoingReferrals_TemporaryShelter" },
                                { "f. Funeral Assistance/Pauper's Burial", "ii_Concrete_OutgoingReferrals_FuneralAssistance" },
                                { "g. Others specify (networking)", "ii_Concrete_OutgoingReferrals_OthersSpecify" }
                                };

                    foreach (var key in outgoingReferrals.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, outgoingReferrals[key], Model))
                    }

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("2.2.2 Incoming Referrals", "ii_Concrete_IncomingReferrals", Model))

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">3. Psychosocial Counseling</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">Ten Leading Causes for Counselling</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var tenLeadingCauses = new Dictionary<string, string>
                                {
                                { "1. Stress of the family", "ii_Psychosocial_TenLeading_StressFamily" },
                                { "2. Refusal of patient to take home", "ii_Psychosocial_TenLeading_RefusalPatientTakeHome" },
                                { "3. Anxiety of health cost", "ii_Psychosocial_TenLeading_AnxietyHealth" },
                                { "4. Marital problem", "ii_Psychosocial_TenLeading_MaritalProblem" },
                                { "5. Refusal of patient for treatment", "ii_Psychosocial_TenLeading_RefusalPatientTreatment" },
                                { "6. Unbecoming attitude due to postponement if surgery", "ii_Psychosocial_TenLeading_UnbecomingAttitude" },
                                { "7. Emotional problem", "ii_Psychosocial_TenLeading_EmotionalProblem" },
                                { "8. Neglected children", "ii_Psychosocial_TenLeading_NeglectedChildren" },
                                { "9. Sexually abuse", "ii_Psychosocial_TenLeading_SexuallyAbuse" },
                                { "10. Adjustment problem", "ii_Psychosocial_TenLeading_AdjustedProblem" }
                                };

                    foreach (var key in tenLeadingCauses.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, tenLeadingCauses[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap;">3.2 Family Counselling</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var familyCounseling = new Dictionary<string, string>
                    {
                                {"a. Social Worker", "ii_Psychosocial_FamilyCounseling_SocialWorker"},
                                {"b. Health Care Team", "ii_Psychosocial_FamilyCounseling_HealthCareTeam" }
                    };

                    foreach (var key in familyCounseling.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, familyCounseling[key], Model))
                    }

                    var psychologicalCounseling = new Dictionary<string, string>
                                {
                                { "3.3 Psychosocial Crisis Intervention", "ii_Psychosocial_PsychosocialCrisis"},
                                { "3.4 Group Work/Per Session", "ii_Psychosocial_GroupWork"},
                                { "3.5 Patients/Watchers Education", "ii_Psychosocial_PatientsEducation"},
                                { "3.6 Mutual Support Group Session", "ii_Psychosocial_MutualSupport"},
                                { "3.7 Advocacy Group", "ii_Psychosocial_AdvocacyGroup"}
                                };

                    foreach (var key in psychologicalCounseling.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, psychologicalCounseling[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">4. Discharges Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var dischargesServices = new Dictionary<string, string>
                                {
                                { "a. Discharge Planning", "ii_Discharges_DischargePlanning" },
                                { "b. Facilitation of Discharge", "ii_Discharges_FacilitationDischarge" },
                                { "c. Pre-termination Counseling", "ii_Discharges_PreTerminationCounseling" },
                                { "d. Home Conduction", "ii_Discharges_HomeConduction" }
                                };

                    foreach (var key in dischargesServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, dischargesServices[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">5. Support Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap;">5.1 Ward Visitation</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var wardVisitation = new Dictionary<string, string>
                                {
                                { "a. Individual", "ii_Support_Ward_Individual" },
                                { "b. Team", "ii_Support_Ward_Team" }
                                };

                    foreach (var key in wardVisitation.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, wardVisitation[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">6. Case Conferences</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var caseConferences = new Dictionary<string, string>
                                {
                                { "a. Multi Disciplinary", "ii_Case_MultiDisciplinary" },
                                { "b. MSWD", "ii_Case_MSWD" }
                                };

                    foreach (var key in caseConferences.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseConferences[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">7. Follow-up Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var followUpServices = new Dictionary<string, string>
                                {
                                { "7.1 Home Visit", "ii_FollowUp_HomeVisit" },
                                { "7.2 Letters Sent", "ii_FollowUp_LettersSent" },
                                { "7.3 Contact of Relatives by Telephone", "ii_FollowUp_ContactRelativesTelephone" },
                                { "7.4 Contact of Relatives through Mass Media", "ii_FollowUp_ContactRelativesMassMedia" }
                                };

                    foreach (var key in followUpServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, followUpServices[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">8. Coordination/Initiated by MSW</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var coordinationsByMSW = new Dictionary<string, string>
                                {
                                { "a. Physicians", "ii_Coordination_Physicians" },
                                { "b. Nurses", "ii_Coordination_Nurses" },
                                { "c. Pharmacist", "ii_Coordination_Pharmacist" },
                                { "d. Nutritionist", "ii_Coordination_Nutritionist" },
                                { "e. Other Staff", "ii_Coordination_OtherStaff" },
                                { "f. Management", "ii_Coordination_Management" }
                                };

                    foreach (var key in coordinationsByMSW.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, coordinationsByMSW[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">9. Consultative and Advisory Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var consultatives = new Dictionary<string, string>
                                {
                                { "a. Physicians", "ii_Consultive_Physicians" },
                                { "b. Office Staff", "ii_Consultive_OfficeStaff" },
                                { "c. Outside Hospital", "ii_Consultive_OutsideHospital" },
                                };

                    foreach (var key in consultatives.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, consultatives[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">10. Community Outreach</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold;">III. CASE MANAGEMENT SERVICES</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var caseManagements = new Dictionary<string, string>
                                {
                                { "1.1 Pre admission Counselling", "iii_PreAdmissionCounseling" },
                                { "1.2 Intake Interview", "iii_IntakeInterview" },
                                { "1.3 Collateral Interview", "iii_CollateralInterview" },
                                { "1.4 Issuance of MSS Card", "iii_IssuanceMSSCard" },
                                { "1.5 Indicate classification in the chart (in pts only)", "iii_IndicateClassification" },
                                { "1.6 Psychosocial Assessment", "iii_PsychosocialAssessment" },
                                { "1.7 Psychosocial Counselling", "iii_PsychosocialCounseling" },
                                { "1.8 Coordination w/ Multidiciplinary Team", "iii_CoordinationMultidisciplinary" },
                                { "1.9 Completion of Intake Form", "iii_CompletionIntakeForm" },
                                { "1.10 Health Education", "iii_HealthEducation" },
                                { "1.11 Crisis Intervention", "iii_CrisisIntervention" },
                                };

                    foreach (var key in caseManagements.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseManagements[key], Model))
                    }

                    var concreteServices = new Dictionary<string, string>
                                {
                                { "1.12.1 Facilitaion/Provision of Meds/Procedures", "iii_ConcreteServices_Facilitation" },
                                { "1.12.2 Transportation Assistance (w/in MSS resources)", "iii_ConcreteServices_Transportation" },
                                { "1.12.3 Material Assistance (food, clothing)", "iii_ConcreteServices_MaterialAssistance" },
                                { "1.12.4 Financial Assistance (w/in MSS resources)", "iii_ConcreteServices_FinancialAssistance" }
                                };

                    foreach (var key in concreteServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, concreteServices[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap;">1.13 Referral</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var referralServices = new Dictionary<string, string>
                                {
                                { "1.13.1 Facilitating Incoming Referral", "iii_Referral_Facilitating" },
                                { "1.13.2 Preparing the Referral", "iii_Referral_Preparing" },
                                { "1.13.3 Coordination w/ the Receiveing Agency", "iii_Referral_Coordination" }
                                };

                    foreach (var key in referralServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, referralServices[key], Model))
                    }

                    var caseManagements2 = new Dictionary<string, string>
                                {
                                { "1.14 Ward Rounds (no. of pts visited)", "iii_WardRounds" },
                                { "1.15 Home Visitation", "iii_HomeVisitation" },
                                { "1.16 Advocacy Role", "iii_AdvocacyRole" },
                                { "1.17 Education", "iii_Education" },
                                };

                    foreach (var key in caseManagements2.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseManagements2[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap;">1.18 Therapeutic Social Work Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var therapeuticServices = new Dictionary<string, string>
                                {
                                { "1.18.1 Abandoned", "iii_Therapeutic_Abandoned" },
                                { "1.18.2 Sexually Abused", "iii_Therapeutic_SexuallyAbused" },
                                { "1.18.3 Neglected", "iii_Therapeutic_Neglected" },
                                { "1.18.4 Battered", "iii_Therapeutic_Battered" }
                                };

                    foreach (var key in therapeuticServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, therapeuticServices[key], Model))
                    }

                    var caseManagements3 = new Dictionary<string, string>
                                {
                                { "1.19 Protective Services", "iii_ProtectiveServices" },
                                { "1.20 Grief Work", "iii_GriefWork" },
                                { "1.21 Behavioral Modification ", "iii_Behavioral" },
                                { "1.22 Networking (meeting w/ other institution/grp org.)", "iii_Networking" },
                                { "1.23 Politicians", "iii_Politicians" },
                                { "1.24 Coordination w/ Mass Media", "iii_CoordinationMassMedia" },
                                { "1.25 Consultaion/Advisory Services", "iii_ConsultationAdvisory" },
                                { "1.26 Attendance to Case Conferences Committee Meetings", "iii_AttendanceCaseConference" },
                                };

                    foreach (var key in caseManagements3.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseManagements3[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap;">1.27 Attendance to Clinical Comittees</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var attendances = new Dictionary<string, string>
                                {
                                { "1.27.1 Disharge Planning", "iii_AttendanceClinical_Discharge" },
                                { "1.27.2 Facilitation of Discharge", "iii_AttendanceClinical_Facilitation" },
                                { "1.27.3 Home Conduction", "iii_AttendanceClinical_Home" }
                                };

                    foreach (var key in attendances.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, attendances[key], Model))
                    }

                    @await Html.PartialAsync("Partials/_StatisticsRow", ("1.28 Follow up Services", "iii_FollowUpServices", Model))

                    <tr>
                        <td style="white-space: nowrap;">1.29 Documentation</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var documentations = new Dictionary<string, string>
                                {
                                { "1.29.1 Profile", "iii_Documentation_Profile" },
                                { "1.29.2 Progress Notes", "iii_Documentation_ProgressNotes" },
                                { "1.29.3 Groupwork Recording", "iii_Documentation_GroupWork" },
                                { "1.29.4 Social Case Study Report/Social Case Summary", "iii_Documentation_SocialCase" },
                                { "1.29.5 Home Visit Report", "iii_Documentation_HomeVisit" }
                                };

                    foreach (var key in documentations.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, documentations[key], Model))
                    }

                    var caseManagements5 = new Dictionary<string, string>
                                {
                                { "1.30 Palliative Care", "iii_Palliative" },
                                { "1.31 Facilitation of Unclaimed Cadaver", "iii_FacilitationUnclaimed" },
                                { "1.32 Post Discharge Services", "iii_PostDischarge" },
                                { "1.33 Follow up Services through text/phone", "iii_FollowUpServicesText" },
                                { "1.34 Follow up Treatment Plans", "iii_FollowUpTreatment" },
                                { "1.35 Follow up of Rehabilitation Plans", "iii_FollowUpRehabilitation" },
                                };

                    foreach (var key in caseManagements5.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseManagements5[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap;">1.36 Rehabilitation Services</td>
                        @for (int i = 1; i <= 14; i++)
                        {
                            if (i == 7 || i == 14)
                            {
                                <td style="white-space: nowrap;">0</td>
                            }
                            else
                            {
                                <td style="white-space: nowrap;"></td>
                            }
                        }
                    </tr>

                    var rehabilitationServices = new Dictionary<string, string>
                                {
                                { "1.36.1 Skills Training", "iii_Rehabilitation_Skills" },
                                { "1.36.2 Job Placement", "iii_Rehabilitation_Job" },
                                { "1.36.3 Capital Assistance", "iii_Rehabilitation_Capital" }
                                };

                    foreach (var key in rehabilitationServices.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, rehabilitationServices[key], Model))
                    }

                    var caseManagements6 = new Dictionary<string, string>
                                {
                                { "1.37 MSWD Fund Raising Activity", "iii_MSWDFund" },
                                { "1.38 Hospital Activity", "iii_HospitalActivity" },
                                { "1.39 Linkage w/ Donors", "iii_LinkageDonors" }
                                };

                    foreach (var key in caseManagements6.Keys)
                    {
                        @await Html.PartialAsync("Partials/_StatisticsRow", (key, caseManagements6[key], Model))
                    }

                    <tr>
                        <td style="white-space: nowrap; font-weight: bold; text-align:center;">TOTAL</td>

                        @for (int i = 1; i <= 6; i++)
                        {
                            <td style="white-space: nowrap; font-weight: bold;">
                                @(Model.TotalCaseloadMonthly[i] + Model.TotalStatisticsMonthly[i].Values.Sum())
                            </td>
                        }

                        <td style="white-space: nowrap; font-weight: bold;">
                            @(Enumerable.Range(1, 6).Sum(i => Model.TotalCaseloadMonthly[i] + Model.TotalStatisticsMonthly[i].Values.Sum()))
                        </td>

                        @for (int i = 7; i <= 12; i++)
                        {
                            <td style="white-space: nowrap; font-weight: bold;">
                                @(Model.TotalCaseloadMonthly[i] + Model.TotalStatisticsMonthly[i].Values.Sum())
                            </td>
                        }

                        <td style="white-space: nowrap; font-weight: bold;">
                            @(Enumerable.Range(7, 6).Sum(i => Model.TotalCaseloadMonthly[i] + Model.TotalStatisticsMonthly[i].Values.Sum()))
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>
